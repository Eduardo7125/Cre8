---
function toggleDropdown(option: string) {
throw new Error("Function not implemented.");
}

// Datos pasados a Astro
const { Name, Type, Colors } = Astro.props;

// Array de opciones para los desplegables
const arrayOptions = [
  {
    option: "Color",
    values: ["Red", "Green", "Blue", "Yellow", "Purple", "Orange", "Black", "White"]
  },
  {
    option: "Size",
    values: ["Small", "Medium", "Large", "X-Large", "XX-Large"]
  },
  {
    option: "Text Type",
    values: ["Bold", "Italic", "Underline", "Strikethrough", "Normal"]
  },
  {
    option: "Padding",
    values: ["None", "Small", "Medium", "Large", "X-Large"]
  },
];

---

<!-- Drawer toggle -->
<div class="text-center">
    <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800" type="button" data-drawer-target="drawer-example" data-drawer-show="drawer-example" aria-controls="drawer-example">
        Lateral Bar
    </button>
</div>

<!-- Drawer component -->
<div id="drawer-example" class="fixed top-0 left-0 z-40 h-screen p-4 overflow-y-auto transition-transform -translate-x-full bg-white w-80 dark:bg-gray-800" tabindex="-1" aria-labelledby="drawer-label">
    <h5 id="drawer-label" class="inline-flex items-center mb-4 text-base font-semibold text-gray-500 dark:text-gray-400">
        Configuración
    </h5>
    <button type="button" data-drawer-hide="drawer-example" aria-controls="drawer-example" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 absolute top-2.5 end-2.5 flex items-center justify-center dark:hover:bg-gray-600 dark:hover:text-white">
        <svg class="w-3 h-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
        </svg>
        <span class="sr-only">Close menu</span>
    </button>

    <!-- Iterar sobre el arrayOptions y crear los apartados -->
    {arrayOptions.map((option) => (
        <div class="mb-6" class={`option-${option.option}`}>
            <p class="mb-2 text-sm font-semibold text-gray-800 dark:text-gray-200">{option.option}</p>
            <div class="relative">
                <button 
                    class="w-full px-4 py-2 text-sm font-medium text-left text-gray-700 bg-gray-200 rounded-lg dark:bg-gray-700 dark:text-gray-400 focus:outline-none"
                    onClick={() => toggleDropdown(option.option)}
                >
                    Seleccionar
                    <svg class="w-4 h-4 inline ml-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </button>
    
                {/* Muestra los valores del dropdown solo para esta opción */}
                <div 
                    id={`dropdown-${option.option}`} 
                    class={`hidden mt-2`}
                >
                    {option.values.map((value, index) => (
                        <a key={index} href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-gray-200 dark:hover:bg-gray-600 rounded-lg shadowp py-2">
                            {value}
                        </a>
                    ))}
                </div>
            </div>
        </div>
    ))}
    
</div>

<script>
    // Lógica para alternar los desplegables
    document.querySelectorAll('.relative button').forEach((button) => {
        button.addEventListener('click', (e) => {
            const target = e.target as HTMLButtonElement;
            const dropdown = target.nextElementSibling as HTMLElement;  // Aseguramos que `nextElementSibling` es un HTMLElement
            if (dropdown) {
                dropdown.classList.toggle('hidden');
            }
        });
    });
</script>


<script src="https://cdn.jsdelivr.net/npm/flowbite@1.6.5/dist/flowbite.min.js"></script>
